{"version":3,"sources":["constants/endpoints.js","constants/tableHeaders.js","context/EditProvider.js","context/TableProvider.js","components/EditDeleteButton.js","functions/restApi.js","components/DynamicTable.js","components/NavBar.js","pages/HomePage.js","components/Rows/CourseRow.js","components/Rows/DepartmentRow.js","components/Rows/MajorRelationRow.js","components/Rows/MajorRow.js","components/Rows/ProjectRow.js","components/Rows/StudentRow.js","routes/InputRowRoutes.js","components/Reports/StudentProjectsReport.js","routes/ReportRoutes.js","pages/TablesPage.js","App.js","reportWebVitals.js","index.js"],"names":["localHost","courseUrl","departmentUrl","majorUrl","majorRelationUrl","projectUrl","studentUrl","urlByTable","course","department","major","majorRelation","project","student","tableHeaderChooser","label","field","sort","width","studentProjects","EditContext","createContext","EditProvider","children","useState","isEdit","setIsEdit","editData","setEditData","value","editTableType","setEditTableType","Provider","TableContext","TableProvider","tableType","setTableType","courseTable","setCourseTable","departmentTable","setDepartmentTable","majorTable","setMajorTable","majorRelationTable","setMajorRelationTable","projectTable","setProjectTable","studentTable","setStudentTable","data","table","setTable","EditDeleteButton","onDelete","onEdit","floating","size","color","onClick","icon","addRow","rowData","a","url","axios","post","response","deleteRow","delete","editRow","newData","put","DynamicTable","props","useContext","dataObj","tableData","columns","rows","map","button","undefined","id","className","NavBar","isOpen","setIsOpen","expand","dark","href","navbar","left","nav","caret","tag","MDBNavLink","to","HomePage","useEffect","CourseRow","initialFormState","courseId","name","instructor","departmentId","formData","setFormData","buttonNameText","setButtonNameText","resetEditData","useCallback","isEditRow","form","sm","for","onChange","e","target","required","type","disabled","preventDefault","parseInt","editDataObject","oldData","DepartmentRow","departmentHead","MajorRelationRow","studentId","majorId","MajorRow","ProjectRow","projectId","StudentRow","gpa","gradClass","InputRowRoutes","exact","path","component","render","StudentProjectsReport","onClickReport","FakeComponent","ReportRoutes","TablesPage","courseFetch","useFetch","departmentFetch","majorFetch","majorRelationFetch","projectFetch","studentFetch","isLoading","isTableLoading","spin","scrollY","scrollX","maxHeight","striped","sortable","responsive","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b1e4de88.chunk.js","sourcesContent":["const localHost = 'http://127.0.0.1:5000'\r\n\r\nexport const courseUrl = `${localHost}/table/course`\r\nexport const departmentUrl = `${localHost}/table/department`\r\nexport const majorUrl = `${localHost}/table/major`\r\nexport const majorRelationUrl = `${localHost}/table/major_relation`\r\nexport const projectUrl = `${localHost}/table/project`\r\nexport const studentUrl = `${localHost}/table/student`\r\n\r\nexport const urlByTable = {\r\n    course: courseUrl,\r\n    department: departmentUrl,\r\n    major: majorUrl,\r\n    majorRelation: majorRelationUrl,\r\n    project: projectUrl,\r\n    student: studentUrl,\r\n}\r\n","/*********** TABLES ***********/\r\nexport const courseHeader = [\r\n    {\r\n        label: 'Course ID',\r\n        field: 'courseId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Course Name',\r\n        field: 'name',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Instructor',\r\n        field: 'instructor',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Department ID',\r\n        field: 'departmentId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 200,\r\n    },\r\n]\r\n\r\nexport const departmentHeader = [\r\n    {\r\n        label: 'Department ID',\r\n        field: 'departmentId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Department Name',\r\n        field: 'name',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Department Head',\r\n        field: 'departmentHead',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 200,\r\n    },\r\n]\r\n\r\nexport const majorHeader = [\r\n    {\r\n        label: 'Major ID',\r\n        field: 'majorId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Name',\r\n        field: 'name',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 200,\r\n    },\r\n]\r\n\r\nexport const majorRelationHeader = [\r\n    {\r\n        label: 'Student ID',\r\n        field: 'studentId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Major ID',\r\n        field: 'majorId',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 50,\r\n    },\r\n]\r\n\r\nexport const projectHeader = [\r\n    {\r\n        label: 'Project ID',\r\n        field: 'projectId',\r\n        sort: 'asc',\r\n        width: 75,\r\n    },\r\n    {\r\n        label: 'Name',\r\n        field: 'name',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Course ID',\r\n        field: 'courseId',\r\n        sort: 'asc',\r\n        width: 75,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 200,\r\n    },\r\n]\r\n\r\nexport const studentHeader = [\r\n    {\r\n        label: 'Student ID',\r\n        field: 'studentId',\r\n        sort: 'asc',\r\n        width: 100,\r\n    },\r\n    {\r\n        label: 'Name',\r\n        field: 'name',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Project ID',\r\n        field: 'projectId',\r\n        sort: 'asc',\r\n        width: 100,\r\n    },\r\n    {\r\n        label: 'GPA',\r\n        field: 'gpa',\r\n        sort: 'asc',\r\n        width: 75,\r\n    },\r\n    {\r\n        label: 'Graduation Class',\r\n        field: 'gradClass',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Edit/Delete',\r\n        field: 'button',\r\n        width: 200,\r\n    },\r\n]\r\n\r\n/*********** REPORTS ***********/\r\n\r\nexport const studentProjectsHeader = [\r\n    {\r\n        label: 'Student ID',\r\n        field: 'studentId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Student Name',\r\n        field: 'studentName',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n    {\r\n        label: 'Project ID',\r\n        field: 'projectId',\r\n        sort: 'asc',\r\n        width: 120,\r\n    },\r\n    {\r\n        label: 'Project Name',\r\n        field: 'projectName',\r\n        sort: 'asc',\r\n        width: 200,\r\n    },\r\n]\r\n\r\nexport const tableHeaderChooser = {\r\n    course: courseHeader,\r\n    department: departmentHeader,\r\n    major: majorHeader,\r\n    majorRelation: majorRelationHeader,\r\n    project: projectHeader,\r\n    student: studentHeader,\r\n    studentProjects: studentProjectsHeader,\r\n}\r\n","import { createContext, useState } from 'react'\r\n\r\nexport const EditContext = createContext()\r\n\r\nexport const EditProvider = ({ children }) => {\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [editData, setEditData] = useState({})\r\n    const [editTableType, setEditTableType] = useState({})\r\n\r\n    const value = {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    }\r\n\r\n    return <EditContext.Provider value={value}>{children}</EditContext.Provider>\r\n}\r\n","import { createContext, useState } from 'react'\r\n\r\nexport const TableContext = createContext()\r\n\r\nexport const TableProvider = ({ children }) => {\r\n    const [tableType, setTableType] = useState()\r\n    const [courseTable, setCourseTable] = useState()\r\n    const [departmentTable, setDepartmentTable] = useState()\r\n    const [majorTable, setMajorTable] = useState()\r\n    const [majorRelationTable, setMajorRelationTable] = useState()\r\n    const [projectTable, setProjectTable] = useState()\r\n    const [studentTable, setStudentTable] = useState()\r\n    const [studentProjectsTable, setStudentProjectsTable] = useState()\r\n\r\n    const value = {\r\n        tableType,\r\n        setTableType,\r\n        data: {\r\n            course: { table: courseTable, setTable: setCourseTable },\r\n            department: {\r\n                table: departmentTable,\r\n                setTable: setDepartmentTable,\r\n            },\r\n            major: { table: majorTable, setTable: setMajorTable },\r\n            majorRelation: {\r\n                table: majorRelationTable,\r\n                setTable: setMajorRelationTable,\r\n            },\r\n            project: { table: projectTable, setTable: setProjectTable },\r\n            student: { table: studentTable, setTable: setStudentTable },\r\n            studentProjects: {\r\n                table: studentProjectsTable,\r\n                setTable: setStudentProjectsTable,\r\n            },\r\n        },\r\n    }\r\n\r\n    return (\r\n        <TableContext.Provider value={value}>{children}</TableContext.Provider>\r\n    )\r\n}\r\n","import { MDBBtn, MDBIcon } from 'mdbreact'\r\n\r\nexport const EditDeleteButton = ({ onDelete, onEdit }) => (\r\n    <div>\r\n        <MDBBtn floating=\"true\" size=\"sm\" color=\"blue-grey\" onClick={onEdit}>\r\n            <MDBIcon icon=\"edit\" />\r\n        </MDBBtn>\r\n\r\n        <MDBBtn floating=\"true\" size=\"sm\" color=\"blue-grey\" onClick={onDelete}>\r\n            <MDBIcon icon=\"trash\" />\r\n        </MDBBtn>\r\n    </div>\r\n)\r\n","import axios from 'axios'\r\n\r\nexport const addRow = async (tableType, rowData, data, url = '') => {\r\n    const response = await axios.post(url, rowData)\r\n    data[tableType].setTable(response.data.data)\r\n}\r\n\r\nexport const deleteRow = async (tableType, rowData, data, url = '') => {\r\n    const response = await axios.delete(url, { data: rowData })\r\n    data[tableType].setTable(response.data.data)\r\n}\r\n\r\nexport const editRow = async (tableType, newData, data, url = '') => {\r\n    const response = await axios.put(url, newData)\r\n    data[tableType].setTable(response.data.data)\r\n}\r\n","import { MDBDataTableV5 } from 'mdbreact'\r\nimport { useContext } from 'react'\r\n\r\nimport { urlByTable } from '../constants/endpoints'\r\nimport { tableHeaderChooser } from '../constants/tableHeaders'\r\nimport { EditContext } from '../context/EditProvider'\r\nimport { TableContext } from '../context/TableProvider'\r\nimport { EditDeleteButton } from './EditDeleteButton'\r\nimport { deleteRow } from '../functions/restApi'\r\n\r\nexport const DynamicTable = (props) => {\r\n    const { tableType, data } = useContext(TableContext)\r\n    const { setIsEdit, setEditData, setEditTableType } = useContext(EditContext)\r\n    const dataObj = data[tableType] || {}\r\n\r\n    const tableData = {\r\n        columns: tableHeaderChooser[tableType],\r\n        rows: (dataObj['table'] || []).map((rowData) => ({\r\n            ...rowData,\r\n            button: (\r\n                <EditDeleteButton\r\n                    onDelete={() => {\r\n                        deleteRow(\r\n                            tableType,\r\n                            rowData,\r\n                            data,\r\n                            urlByTable[tableType]\r\n                        )\r\n                    }}\r\n                    onEdit={() => {\r\n                        setIsEdit(true)\r\n                        setEditTableType(tableType)\r\n                        setEditData(rowData)\r\n                    }}\r\n                />\r\n            ),\r\n        })),\r\n    }\r\n\r\n    if (tableType === undefined) {\r\n        return <div></div>\r\n    }\r\n\r\n    return (\r\n        <div id=\"table\" className=\"mt-5\">\r\n            <MDBDataTableV5 {...props} data={tableData} />\r\n        </div>\r\n    )\r\n}\r\n","import {\r\n    MDBCollapse,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle,\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavbarToggler,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n} from 'mdbreact'\r\nimport { useState } from 'react'\r\n\r\nexport const NavBar = () => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    return (\r\n        <div id=\"navbar\">\r\n            <MDBNavbar color=\"default-color\" expand=\"md\" dark>\r\n                <MDBNavbarBrand href=\"/projectify\">\r\n                    <strong className=\"white-text\">Projectify</strong>\r\n                </MDBNavbarBrand>\r\n                <MDBNavbarToggler onClick={() => setIsOpen(!isOpen)} />\r\n                <MDBCollapse isOpen={isOpen} navbar>\r\n                    <MDBNavbarNav left>\r\n                        <MDBNavItem>\r\n                            <MDBDropdown>\r\n                                <MDBDropdownToggle nav caret>\r\n                                    Tables\r\n                                </MDBDropdownToggle>\r\n                                <MDBDropdownMenu className=\"default-color\">\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/student\"\r\n                                    >\r\n                                        Student\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/course\"\r\n                                    >\r\n                                        Course\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/project\"\r\n                                    >\r\n                                        Project\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/major\"\r\n                                    >\r\n                                        Major\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/major_relation\"\r\n                                    >\r\n                                        Major Relations\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/tables/department\"\r\n                                    >\r\n                                        Department\r\n                                    </MDBDropdownItem>\r\n                                </MDBDropdownMenu>\r\n                            </MDBDropdown>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBDropdown>\r\n                                <MDBDropdownToggle nav caret>\r\n                                    Reports\r\n                                </MDBDropdownToggle>\r\n                                <MDBDropdownMenu className=\"default-color\">\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/reports/studentProjects\"\r\n                                    >\r\n                                        Student Projects Report\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/reports/report2\"\r\n                                    >\r\n                                        Report 2\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/reports/report3\"\r\n                                    >\r\n                                        Report 3\r\n                                    </MDBDropdownItem>\r\n                                    <MDBDropdownItem\r\n                                        className=\"default-color\"\r\n                                        tag={MDBNavLink}\r\n                                        to=\"/projectify/reports/report4\"\r\n                                    >\r\n                                        Report 4\r\n                                    </MDBDropdownItem>\r\n                                </MDBDropdownMenu>\r\n                            </MDBDropdown>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                </MDBCollapse>\r\n            </MDBNavbar>\r\n        </div>\r\n    )\r\n}\r\n","import { useContext, useEffect } from 'react'\r\n\r\nimport { TableContext } from '../context/TableProvider'\r\n\r\nexport const HomePage = () => {\r\n    const { setTableType } = useContext(TableContext)\r\n\r\n    useEffect(() => {\r\n        setTableType(undefined)\r\n    }, [setTableType])\r\n\r\n    return (\r\n        <h1 className=\"blue-grey-text text-center\">\r\n            Select a Table or Report to display by clicking on the\r\n            Tables/Reports dropdown above.\r\n        </h1>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { courseUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const CourseRow = () => {\r\n    const initialFormState = {\r\n        courseId: '',\r\n        name: '',\r\n        instructor: '',\r\n        departmentId: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('course')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'course' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'course'\r\n\r\n    const onClickCourse = (e) => {\r\n        e.preventDefault()\r\n        addRow('course', formData, data, courseUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditCourse = (e) => {\r\n        e.preventDefault()\r\n        formData.courseId = parseInt(formData.courseId)\r\n        formData.departmentId = parseInt(formData.departmentId)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('course', editDataObject, data, courseUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Course Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"courseId\" sm={10}>\r\n                                    Course ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"courseId\"\r\n                                    name=\"courseId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.courseId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\" sm={2}>\r\n                                    Name\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.name}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"instructor\" sm={2}>\r\n                                    Instructor\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"instructor\"\r\n                                    name=\"instructor\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.instructor}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"departmentId\" sm={10}>\r\n                                    Department ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"departmentId\"\r\n                                    name=\"departmentId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.departmentId}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.courseId}\r\n                            onClick={isEditRow ? onEditCourse : onClickCourse}\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { departmentUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const DepartmentRow = () => {\r\n    const initialFormState = {\r\n        departmentId: '',\r\n        name: '',\r\n        departmentHead: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('department')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'department' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'department'\r\n\r\n    const onClickDepartment = (e) => {\r\n        e.preventDefault()\r\n        addRow('department', formData, data, departmentUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditDepartment = (e) => {\r\n        e.preventDefault()\r\n        formData.departmentId = parseInt(formData.departmentId)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('department', editDataObject, data, departmentUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Department Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"departmentId\" sm={10}>\r\n                                    Department ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"departmentId\"\r\n                                    name=\"departmentId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.departmentId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\" sm={2}>\r\n                                    Name\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.name}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"departmentHead\" sm={10}>\r\n                                    Department Head\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"departmentHead\"\r\n                                    name=\"departmentHead\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.departmentHead}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.departmentId}\r\n                            onClick={\r\n                                isEditRow ? onEditDepartment : onClickDepartment\r\n                            }\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { majorRelationUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const MajorRelationRow = () => {\r\n    const initialFormState = {\r\n        studentId: '',\r\n        majorId: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('majorRelation')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'majorRelation' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'majorRelation'\r\n\r\n    const onClickMajorRelation = (e) => {\r\n        e.preventDefault()\r\n        addRow('majorRelation', formData, data, majorRelationUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditMajorRelation = (e) => {\r\n        e.preventDefault()\r\n        formData.studentId = parseInt(formData.studentId)\r\n        formData.majorId = parseInt(formData.majorId)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('majorRelation', editDataObject, data, majorRelationUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Major Relation Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"studentId\" sm={10}>\r\n                                    Student ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"studentId\"\r\n                                    name=\"studentId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.studentId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"majorId\" sm={10}>\r\n                                    Major ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"majorId\"\r\n                                    name=\"majorId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.majorId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.majorId || !formData.studentId}\r\n                            onClick={\r\n                                isEditRow\r\n                                    ? onEditMajorRelation\r\n                                    : onClickMajorRelation\r\n                            }\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { majorUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const MajorRow = () => {\r\n    const initialFormState = {\r\n        majorId: '',\r\n        name: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('major')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'major' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'major'\r\n\r\n    const onClickMajor = (e) => {\r\n        e.preventDefault()\r\n        addRow('major', formData, data, majorUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditMajor = (e) => {\r\n        e.preventDefault()\r\n        formData.majorId = parseInt(formData.majorId)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('major', editDataObject, data, majorUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Major Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"majorId\" sm={10}>\r\n                                    Major ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"majorId\"\r\n                                    name=\"majorId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.majorId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\" sm={2}>\r\n                                    Name\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.name}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.majorId}\r\n                            onClick={isEditRow ? onEditMajor : onClickMajor}\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { projectUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const ProjectRow = () => {\r\n    const initialFormState = {\r\n        projectId: '',\r\n        name: '',\r\n        courseId: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('project')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'project' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'project'\r\n\r\n    const onClickProject = (e) => {\r\n        e.preventDefault()\r\n        addRow('project', formData, data, projectUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditProject = (e) => {\r\n        e.preventDefault()\r\n        formData.courseId = parseInt(formData.courseId)\r\n        formData.projectId = parseInt(formData.projectId)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('project', editDataObject, data, projectUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Project Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"projectId\" sm={10}>\r\n                                    Project ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"projectId\"\r\n                                    name=\"projectId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.projectId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\" sm={2}>\r\n                                    Name\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={10}\r\n                                    type=\"text\"\r\n                                    value={formData.name}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"courseId\" sm={10}>\r\n                                    Course ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"courseId\"\r\n                                    name=\"courseId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.courseId}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.courseId}\r\n                            onClick={isEditRow ? onEditProject : onClickProject}\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from 'reactstrap'\r\n\r\nimport { studentUrl } from '../../constants/endpoints'\r\nimport { EditContext } from '../../context/EditProvider'\r\nimport { TableContext } from '../../context/TableProvider'\r\nimport { addRow, editRow } from '../../functions/restApi'\r\n\r\nexport const StudentRow = () => {\r\n    const initialFormState = {\r\n        studentId: '',\r\n        projectId: '',\r\n        name: '',\r\n        gpa: '',\r\n        gradClass: '',\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState)\r\n    const [buttonNameText, setButtonNameText] = useState('Add')\r\n    const { data, setTableType } = useContext(TableContext)\r\n    const {\r\n        editData,\r\n        editTableType,\r\n        isEdit,\r\n        setEditData,\r\n        setEditTableType,\r\n        setIsEdit,\r\n    } = useContext(EditContext)\r\n\r\n    const resetEditData = useCallback(() => {\r\n        setEditData({})\r\n        setEditTableType('')\r\n        setIsEdit(false)\r\n    }, [setEditData, setEditTableType, setIsEdit])\r\n\r\n    useEffect(() => {\r\n        setTableType('student')\r\n        resetEditData()\r\n    }, [setTableType, resetEditData])\r\n\r\n    useEffect(() => {\r\n        isEdit && editTableType === 'student' && setFormData(editData)\r\n        isEdit && setButtonNameText('Update')\r\n    }, [editData, editTableType, isEdit])\r\n\r\n    const isEditRow = isEdit && editTableType === 'student'\r\n\r\n    const onClickStudent = (e) => {\r\n        e.preventDefault()\r\n        addRow('student', formData, data, studentUrl)\r\n        setFormData(initialFormState)\r\n    }\r\n\r\n    const onEditStudent = (e) => {\r\n        e.preventDefault()\r\n        formData.studentId = parseInt(formData.studentId)\r\n        formData.projectId = parseInt(formData.projectId)\r\n        formData.gpa = parseInt(formData.gpa)\r\n        let editDataObject = {\r\n            oldData: { ...editData },\r\n            newData: { ...formData },\r\n        }\r\n        editRow('student', editDataObject, data, studentUrl)\r\n        setFormData(initialFormState)\r\n        setButtonNameText('Add')\r\n        resetEditData()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"tc mb4\">Student Table</h1>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"studentId\" sm={10}>\r\n                                    Student ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"studentId\"\r\n                                    name=\"studentId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    required\r\n                                    size={1}\r\n                                    type=\"number\"\r\n                                    value={formData.studentId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\" sm={2}>\r\n                                    Name\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.name}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"projectId\" sm={10}>\r\n                                    Project ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"projectId\"\r\n                                    name=\"projectId\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"number\"\r\n                                    value={formData.projectId}\r\n                                />\r\n                                <FormText>required</FormText>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"gpa\" sm={2}>\r\n                                    GPA\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"gpa\"\r\n                                    name=\"gpa\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={10}\r\n                                    type=\"number\"\r\n                                    value={formData.gpa}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"gradClass\" sm={10}>\r\n                                    Graduation Class\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"gradClass\"\r\n                                    name=\"gradClass\"\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    size={20}\r\n                                    type=\"text\"\r\n                                    value={formData.gradClass}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            className=\"h-25 m-auto\"\r\n                            color=\"blue-grey\"\r\n                            disabled={\r\n                                !formData.studentId || !formData.projectId\r\n                            }\r\n                            onClick={isEditRow ? onEditStudent : onClickStudent}\r\n                        >\r\n                            {buttonNameText}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { Route, Switch } from 'react-router-dom'\r\n\r\nimport { CourseRow } from '../components/Rows/CourseRow'\r\nimport { DepartmentRow } from '../components/Rows/DepartmentRow'\r\nimport { MajorRelationRow } from '../components/Rows/MajorRelationRow'\r\nimport { MajorRow } from '../components/Rows/MajorRow'\r\nimport { ProjectRow } from '../components/Rows/ProjectRow'\r\nimport { StudentRow } from '../components/Rows/StudentRow'\r\n\r\nexport const InputRowRoutes = () => (\r\n    <Switch>\r\n        <Route exact path=\"/projectify/tables/course\" component={CourseRow} />\r\n        <Route\r\n            exact\r\n            path=\"/projectify/tables/department\"\r\n            component={DepartmentRow}\r\n        />\r\n        <Route exact path=\"/projectify/tables/major\" component={MajorRow} />\r\n        <Route\r\n            exact\r\n            path=\"/projectify/tables/major_relation\"\r\n            component={MajorRelationRow}\r\n        />\r\n        <Route exact path=\"/projectify/tables/project\" component={ProjectRow} />\r\n        <Route exact path=\"/projectify/tables/student\" component={StudentRow} />\r\n        <Route\r\n            render={() => (\r\n                <h1 className=\"blue-grey-text text-center\">\r\n                    Table Not Found, make sure the URL is correct.\r\n                </h1>\r\n            )}\r\n        />\r\n    </Switch>\r\n)\r\n","import axios from 'axios'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport { Button, Col, Form, FormGroup, Input, Label, Row } from 'reactstrap'\r\n\r\nimport { TableContext } from '../../context/TableProvider'\r\n\r\nexport const StudentProjectsReport = () => {\r\n    const [formData, setFormData] = useState({\r\n        studentId: undefined,\r\n    })\r\n    const { data, setTableType } = useContext(TableContext)\r\n\r\n    useEffect(() => {\r\n        setTableType('studentProjects')\r\n    }, [setTableType])\r\n\r\n    const onClickReport = async (e) => {\r\n        //TODO: Update URL\r\n        e.preventDefault()\r\n        const response = await axios.post('', formData)\r\n        data.studentProjects.setTable(response.data.data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"tc mb4\">\r\n                <h1>Student Projects Report</h1>\r\n                <h3>\r\n                    Input a student ID to retrieve all of the projects\r\n                    associated with that student.\r\n                </h3>\r\n            </div>\r\n            <div\r\n                id=\"add-row\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n                <Form>\r\n                    <Row form>\r\n                        <Col sm={20}>\r\n                            <FormGroup>\r\n                                <Label for=\"studentId\" sm={10}>\r\n                                    Student ID\r\n                                </Label>\r\n                                <Input\r\n                                    id=\"studentId\"\r\n                                    name=\"studentId\"\r\n                                    type=\"number\"\r\n                                    size={10}\r\n                                    onChange={(e) =>\r\n                                        setFormData({\r\n                                            ...formData,\r\n                                            [e.target.name]: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button\r\n                            color=\"blue-grey\"\r\n                            className=\"h-25 m-auto\"\r\n                            disabled={!formData.studentId}\r\n                            onClick={onClickReport}\r\n                        >\r\n                            Retrieve\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport { StudentProjectsReport } from '../components/Reports/StudentProjectsReport'\r\n\r\nconst FakeComponent = () => <div></div>\r\n//TODO: Update report2, report3, report4 once they are added on BE\r\nexport const ReportRoutes = () => (\r\n    <Switch>\r\n        <Route\r\n            path=\"/projectify/reports/studentProjects\"\r\n            component={StudentProjectsReport}\r\n        />\r\n        <Route\r\n            exact\r\n            path=\"/projectify/reports/report2\"\r\n            component={FakeComponent}\r\n        />\r\n        <Route\r\n            exact\r\n            path=\"/projectify/reports/report3\"\r\n            component={FakeComponent}\r\n        />\r\n        <Route\r\n            exact\r\n            path=\"/projectify/reports/report4\"\r\n            component={FakeComponent}\r\n        />\r\n        <Route\r\n            render={() => (\r\n                <h1 className=\"blue-grey-text text-center\">\r\n                    Report Not Found, make sure the URL is correct.\r\n                </h1>\r\n            )}\r\n        />\r\n    </Switch>\r\n)\r\n","import useFetch from 'react-fetch-hook'\r\nimport { MDBIcon } from 'mdbreact'\r\nimport { Fragment, useContext, useEffect } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport { DynamicTable } from '../components/DynamicTable'\r\nimport { NavBar } from '../components/NavBar'\r\nimport {\r\n    courseUrl,\r\n    departmentUrl,\r\n    majorUrl,\r\n    majorRelationUrl,\r\n    projectUrl,\r\n    studentUrl,\r\n} from '../constants/endpoints'\r\nimport { TableContext } from '../context/TableProvider'\r\nimport { HomePage } from '../pages/HomePage'\r\nimport { InputRowRoutes } from '../routes/InputRowRoutes'\r\nimport { ReportRoutes } from '../routes/ReportRoutes'\r\n\r\nexport const TablesPage = () => {\r\n    const { data } = useContext(TableContext)\r\n    const courseFetch = useFetch(courseUrl)\r\n    const departmentFetch = useFetch(departmentUrl)\r\n    const majorFetch = useFetch(majorUrl)\r\n    const majorRelationFetch = useFetch(majorRelationUrl)\r\n    const projectFetch = useFetch(projectUrl)\r\n    const studentFetch = useFetch(studentUrl)\r\n\r\n    useEffect(() => {\r\n        if (!courseFetch.isLoading) {\r\n            data['course'].setTable(courseFetch.data.data)\r\n        }\r\n        if (!departmentFetch.isLoading) {\r\n            data['department'].setTable(departmentFetch.data.data)\r\n        }\r\n        if (!majorFetch.isLoading) {\r\n            data['major'].setTable(majorFetch.data.data)\r\n        }\r\n        if (!majorRelationFetch.isLoading) {\r\n            data['majorRelation'].setTable(majorRelationFetch.data.data)\r\n        }\r\n        if (!studentFetch.isLoading) {\r\n            data['student'].setTable(studentFetch.data.data)\r\n        }\r\n        if (!projectFetch.isLoading) {\r\n            data['project'].setTable(projectFetch.data.data)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [\r\n        courseFetch.isLoading,\r\n        departmentFetch.isLoading,\r\n        majorFetch.isLoading,\r\n        majorRelationFetch.isLoading,\r\n        projectFetch.isLoading,\r\n        studentFetch.isLoading,\r\n    ])\r\n\r\n    const isTableLoading =\r\n        courseFetch.isLoading ||\r\n        departmentFetch.isLoading ||\r\n        majorFetch.isLoading ||\r\n        majorRelationFetch.isLoading ||\r\n        projectFetch.isLoading ||\r\n        studentFetch.isLoading\r\n    return (\r\n        <Fragment>\r\n            <NavBar />\r\n            <div id=\"flex\" className=\"d-flex flex-column\">\r\n                <Switch>\r\n                    <Route exact path=\"/projectify\" component={HomePage} />\r\n                    <Route\r\n                        path=\"/projectify/tables\"\r\n                        component={InputRowRoutes}\r\n                    />\r\n                    <Route\r\n                        path=\"/projectify/reports\"\r\n                        component={ReportRoutes}\r\n                    />\r\n                    <Route\r\n                        render={() => (\r\n                            <h1 className=\"blue-grey-text text-center\">\r\n                                Page Not Found, make sure the URL is correct.\r\n                            </h1>\r\n                        )}\r\n                    />\r\n                </Switch>\r\n                <div className=\"bt blue-grey-text\" />\r\n                {isTableLoading ? (\r\n                    <MDBIcon icon=\"spinner\" spin={true} />\r\n                ) : (\r\n                    <DynamicTable\r\n                        scrollY\r\n                        scrollX\r\n                        maxHeight=\"50vh\"\r\n                        striped\r\n                        sortable={false}\r\n                        responsive\r\n                    />\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { BrowserRouter as Router } from 'react-router-dom'\nimport { TablesPage } from './pages/TablesPage'\nimport { TableProvider } from './context/TableProvider'\nimport { EditProvider } from './context/EditProvider'\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                <TableProvider>\n                    <EditProvider>\n                        <TablesPage />\n                    </EditProvider>\n                </TableProvider>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport 'bootstrap-css-only/css/bootstrap.min.css'\nimport 'mdbreact/dist/css/mdb.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}